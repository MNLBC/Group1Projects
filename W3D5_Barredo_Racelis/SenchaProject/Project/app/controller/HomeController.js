/*
 * File: app/controller/HomeController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Project.controller.HomeController', {
    extend: 'Ext.app.Controller',

    views: [
        'Home'
    ],

    refs: [
        {
            ref: 'showLoginWindow',
            selector: '#showLoginWindow'
        },
        {
            ref: 'homePanel',
            selector: '#homePanel'
        },
        {
            ref: 'searchPanel',
            selector: '#searchPanel'
        },
        {
            ref: 'signupBtn',
            selector: '#signupBtn'
        },
        {
            ref: 'inventoryPanel',
            selector: '#inventoryPanel'
        },
        {
            ref: 'userPanel',
            selector: '#userPanel'
        },
        {
            ref: 'bookGrid',
            selector: '#bookGrid'
        },
        {
            ref: 'nameUserPanel',
            selector: '#nameUserPanel'
        },
        {
            ref: 'usernameUserPanel',
            selector: '#usernameUserPanel'
        },
        {
            ref: 'typeUserPanel',
            selector: '#typeUserPanel'
        },
        {
            ref: 'contactUserPanel',
            selector: '#contactUserPanel'
        },
        {
            ref: 'addressUserPanel',
            selector: '#addressUserPanel'
        },
        {
            ref: 'userGrid',
            selector: '#userGrid'
        },
        {
            ref: 'inventoryBtn',
            selector: '#inventoryBtn'
        },
        {
            ref: 'currentUsername',
            selector: '#currentUsername'
        },
        {
            ref: 'logoutbtn',
            selector: '#logoutbtn'
        },
        {
            ref: 'titleSearchPage',
            selector: '#titleSearchPage'
        },
        {
            ref: 'authorSearchPage',
            selector: '#authorSearchPage'
        },
        {
            ref: 'searchBtnSearchPage',
            selector: '#searchBtnSearchPage'
        },
        {
            ref: 'bookGridSearchPanel',
            selector: '#bookGridSearchPanel'
        },
        {
            ref: 'filter',
            selector: '#inventorySearchBttn'
        },
        {
            ref: 'titleInventoryPage',
            selector: '#titleInventoryPage'
        },
        {
            ref: 'authorInventoryPage',
            selector: '#authorInventoryPage'
        }
    ],

    onShowLoginWindowClick: function() {
                Ext.create('Project.view.LoginWindow').show();
    },

    onSearchButtonClick: function() {
            this.getHomePanel().hide();
            this.getSearchPanel().show();
            this.getInventoryPanel().hide();
            this.getUserPanel().hide();
    },

    onHomeButtonClick: function() {
                this.getHomePanel().show();
                this.getSearchPanel().hide();
                this.getInventoryPanel().hide();
                this.getUserPanel().hide();
    },

    onSignupBtnClick: function() {
                Ext.create('Project.view.SignUpWindow').show();
    },

    onBookMenuBtnClick: function() {
        this.getHomePanel().hide();
        this.getSearchPanel().hide();
        this.getInventoryPanel().show();
        this.getUserPanel().hide();
    },

    onUserMenuBtnClick: function() {
                this.getHomePanel().hide();
                this.getSearchPanel().hide();
                this.getInventoryPanel().hide();
                this.getUserPanel().show();
    },

    onHomeViewportRender: function(component, eOpts) {
                userStore = Ext.create('Project.store.User');
                bookStore = Ext.create('Project.store.Books');
        console.log('viewport render');

    },

    onInventoryPanelRender: function(component, eOpts) {
   

    },

    onRemoveBooksBtnClick: function(button, e, eOptions) {

        var grid = this.getBookGrid();
                console.log(grid);
        var sel = grid.getSelectionModel();

        if (Ext.isEmpty(sel.getSelection())){
            Ext.Msg.alert('No Selected','You have to select on grid');
        }
        else{



            Ext.Msg.confirm("Confirmation", "Do you want to delete the record?", function(btnText){
                if(btnText === "no"){
                    return;
                }
                else if(btnText === "yes"){
                    grid.getStore().remove(sel.getSelection());
                    grid.getView().refresh();
                    Ext.Msg.alert('Selected','You have successfully deleted record on grid');
                }
            }, this);

        }

    },

    onAddBooksBtnClick: function() {
              var grid = this.getBookGrid();
              var bookStore = grid.getStore();
              var newBook = {
                  title: '',
                  author: '',
                  description: '',
                  datePublished: ''
              };

              bookStore.add(newBook);

    },

    onAddUsersBtnClick: function() {
                Ext.create('Project.view.AddUsers').show();
    },

    onRemoveUserBtnClick: function() {
                var grid = this.getUserGrid();
                    console.log(grid);
                var sel = grid.getSelectionModel();

                if (Ext.isEmpty(sel.getSelection())){
                    Ext.Msg.alert('No Selected','You have to select on grid');
                }
                else{
                    Ext.Msg.confirm("Confirmation", "Do you want to delete the record?", function(btnText){
                if(btnText === "no"){
                    return;
                }
                else if(btnText === "yes"){
                    grid.getStore().remove(sel.getSelection());
                    grid.getView().refresh();
                    Ext.Msg.alert('Selected','You have successfully deleted record on grid');
                }

                });
                                    }



    },

    onInventorySearchBttnClick: function(button) {
                var gridStore = this.getBookGrid().getStore();
                gridStore.clearFilter();
                gridStore.filterBy(function(record,id){


                    if(record.data.author.search('Kathryn') !== -1){
                       return true;
                    }


                });
    },

    onFilterClick: function() {

    },

    onLogoutbtnClick: function() {
                   this.getShowLoginWindow().show();
                   this.getSignupBtn().show();
                   this.getCurrentUsername().hide();
                    this.getLogoutbtn().hide();

                    this.getInventoryBtn().hide();
    },

    onSearchBtnSearchPageClick: function(button) {
            var store = this.getBookGridSearchPanel().getStore(),
                title = this.getTitleSearchPage().getValue(),
                author = this.getAuthorSearchPage().getValue();

            store.clearFilter();
            if(!Ext.isEmpty(title)){
                store.filterBy(function(record){
                    if(record.data.title.toLowerCase().search(title.toLowerCase()) !== -1){
                        return true;
                    }
                });
            }

            if(!Ext.isEmpty(author)){
                store.filterBy(function(record){
                    if(record.data.author.toLowerCase().search(author.toLowerCase()) !== -1){
                        return true;
                    }
                });
            }
    },

    onInventorySearchBttnClick: function() {
        var store = this.getBookGrid().getStore(),
                title = this.getTitleInventoryPage().getValue(),
                author = this.getAuthorInventoryPage().getValue();

            store.clearFilter();
            if(!Ext.isEmpty(title)){
                store.filterBy(function(record){
                    if(record.data.title.toLowerCase().search(title.toLowerCase()) !== -1){
                        return true;
                    }
                });
            }

            if(!Ext.isEmpty(author)){
                store.filterBy(function(record){
                    if(record.data.author.toLowerCase().search(author.toLowerCase()) !== -1){
                        return true;
                    }
                });
            }
    },

    onUserGridRender: function(grid) {
    
    },

    init: function(application) {
        this.control({
            "#showLoginWindow": {
                click: this.onShowLoginWindowClick
            },
            "#searchButton": {
                click: this.onSearchButtonClick
            },
            "#homeButton": {
                click: this.onHomeButtonClick
            },
            "#signupBtn": {
                click: this.onSignupBtnClick
            },
            "#bookMenuBtn": {
                click: this.onBookMenuBtnClick
            },
            "#userMenuBtn": {
                click: this.onUserMenuBtnClick
            },
            "#homeViewport": {
                render: this.onHomeViewportRender
            },
            "#inventoryPanel": {
                render: this.onInventoryPanelRender
            },
            "#removeBooksBtn": {
                click: this.onRemoveBooksBtnClick
            },
            "#addBooksBtn": {
                click: this.onAddBooksBtnClick
            },
            "#addUsersBtn": {
                click: this.onAddUsersBtnClick
            },
            "#removeUserBtn": {
                click: this.onRemoveUserBtnClick
            },
            "#inventorySearchBttn": {
                click: this.onInventorySearchBttnClick,
                click: this.onInventorySearchBttnClick
            },
            "#Filter": {
                click: this.onFilterClick
            },
            "#logoutbtn": {
                click: this.onLogoutbtnClick
            },
            "#searchBtnSearchPage": {
                click: this.onSearchBtnSearchPageClick
            },
            "#userGrid": {
                render: this.onUserGridRender
            }
        });
    }

});
