/*
 * File: app/controller/Account.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Libray.controller.Account', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'username',
            selector: '#userName'
        },
        {
            ref: 'password',
            selector: '#password'
        },
        {
            ref: 'booksCont',
            selector: '#mycontainer4'
        },
        {
            ref: 'loginRegisterCont',
            selector: '#mycontainer3'
        },
        {
            ref: 'borrowedCont',
            selector: '#mycontainer5'
        },
        {
            ref: 'welcome',
            selector: '#welcomeLabel'
        },
        {
            ref: 'registerForm',
            selector: '#registerForm'
        },
        {
            ref: 'welcome2',
            selector: '#welcome'
        },
        {
            ref: 'registerWindow',
            selector: '#registerWindow'
        },
        {
            ref: 'firstNameReg',
            selector: '#fNameReg'
        },
        {
            ref: 'lastNameReg',
            selector: '#lNameReg'
        },
        {
            ref: 'userNameReg',
            selector: '#uNameReg'
        },
        {
            ref: 'passwordReg',
            selector: '#passswordReg'
        },
        {
            ref: 'confirmPasswordReg',
            selector: '#cPasswordReg'
        },
        {
            ref: 'registerWin',
            selector: '#registerWin'
        },
        {
            ref: 'adminManageBtn',
            selector: '#mytoolbar1'
        },
        {
            ref: 'borrowManageBtns',
            selector: '#mytoolbar5'
        },
        {
            ref: 'bookList',
            selector: '#bookListGrid'
        }
    ],

    onLoginClick: function() {
        var userName = this.getUsername().getValue(),
            password = this.getPassword().getValue(),
            borrowerStore = Ext.getStore('BorrowersStore'),
            isExisting = false,
            type = 'user';

        // validation when fields is/are empty
        if (!(Ext.isEmpty(userName)) && !Ext.isEmpty(password)) {
            borrowerStore.each(function(record){
                var bUserName = record.get('uname'),
                    bPassword = record.get('password');

        // checking if user is existing
                if ( userName == bUserName && password == bPassword){
                    isExisting = true;
                    type = record.get('type');
                }


            });

        // user existing, will check if inputed username and password is correct
            if (!isExisting) {
                Ext.MessageBox.alert ('Warning', 'Incorrect user name/password');
            } else {

        // show and hide specific functionalities depending on the type user
                if(type==='user'){
                    this.getBorrowManageBtns().show();
                    this.getAdminManageBtn().hide();
                }else if( type==='admin'){
                    this.getBorrowManageBtns().hide();
                    this.getAdminManageBtn().show();
                }
                this.getBooksCont().show();
                this.getLoginRegisterCont().hide();
                this.getWelcome().setValue(userName);
                this.getWelcome2().setValue(userName);
            }

        } else {
            Ext.MessageBox.alert ('Warning', 'Please complete all fields');
        }



    },

    onRegisterClick: function() {
        Ext.create('Libray.view.registerWin').show(); // show registration window
    },

    onManageBtnClick: function() {
        // show borrowed books page
            this.getBooksCont().hide();
            this.getBorrowedCont().show();
    },

    onLogoutClick: function() {
        // Logout (Book list page)
        this.getBooksCont().hide();
        this.getBorrowedCont().hide();
            this.getLoginRegisterCont().show();
    },

    onLogoutBtnClick: function() {
        // Logout (Borrowed books page)
        this.getBooksCont().hide();
        this.getBorrowedCont().hide();
            this.getLoginRegisterCont().show();
    },

    onSubmitBtnClick: function() {
        var fName = this.getFirstNameReg().getValue(),
            lName = this.getLastNameReg().getValue(),
            uName = this.getUserNameReg().getValue(),
            pWord = this.getPasswordReg().getValue(),
            cPWord = this.getConfirmPasswordReg().getValue(),
            store = Ext.getStore('BorrowersStore');

        // Checks if fields is/are not empty
        if((!Ext.isEmpty(fName)) &&
               !Ext.isEmpty(lName) &&
               !Ext.isEmpty(uName) &&
               !Ext.isEmpty(pWord) &&
               !Ext.isEmpty(cPWord)){

            // checks if password and cofirm password are the same
            if(pWord === cPWord){
                var user = {
                    fname: fName,
                    lname:lName,
                    uname: uName,
                    password:pWord,
                    type:'user'

                };
                store.add(user);
                Ext.MessageBox.alert ('Information', 'User registration successful!');
                this.getRegisterWin().destroy();

            }else{
                Ext.MessageBox.alert ('Warning', 'Password mismatched!');
            }

        }else {
            Ext.MessageBox.alert ('Warning', 'Please complete all fields!');
        }
    },

    onCancelBtnClick: function() {
        // Close registration window
        this.getRegisterWin().destroy();
    },

    init: function(application) {
        this.control({
            "#loginBtn": {
                click: this.onLoginClick
            },
            "#registerBtn": {
                click: this.onRegisterClick
            },
            "#manageBtn": {
                click: this.onManageBtnClick
            },
            "#logout": {
                click: this.onLogoutClick
            },
            "#logoutBtn": {
                click: this.onLogoutBtnClick
            },
            "#submitBtn": {
                click: this.onSubmitBtnClick
            },
            "#cancelBtn": {
                click: this.onCancelBtnClick
            }
        });
    }

});
