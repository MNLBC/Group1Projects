/*
 * File: app/controller/Books.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Libray.controller.Books', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'bookListView',
            selector: '#BookListView'
        },
        {
            ref: 'borrowedView',
            selector: '#borrowedView'
        },
        {
            ref: 'booksCont',
            selector: '#mycontainer4'
        },
        {
            ref: 'borrowedCont',
            selector: '#mycontainer5'
        },
        {
            ref: 'editBookDetails',
            selector: '#editBookBtn'
        },
        {
            ref: 'addEditWin',
            selector: '#addEditWin'
        },
        {
            ref: 'bookList',
            selector: '#bookListGrid'
        },
        {
            ref: 'title',
            selector: '#titleBook'
        },
        {
            ref: 'author',
            selector: '#authorBook'
        },
        {
            ref: 'publisher',
            selector: '#publisherBook'
        },
        {
            ref: 'titleAdd',
            selector: '#titleBookAdd'
        },
        {
            ref: 'authorAdd',
            selector: '#authorBookAdd'
        },
        {
            ref: 'publisherAdd',
            selector: '#publisherBookAdd'
        },
        {
            ref: 'addWin',
            selector: '#addWin'
        }
    ],

    onBorrowBtnClick: function() {
        var gridBook = this.getBookListView(),
            storeBook = gridBook.getStore(),
            storeBorrowed = Ext.getStore('BorrowedStore'),
            selectModel = gridBook.getSelectionModel(),
            selectedBooks = selectModel.getSelection(),
            selected = selectedBooks.length;

            storeBorrowed.add(selectedBooks);
            storeBook.remove(selectedBooks);

    },

    onReturnBookBtnClick: function() {
        var gridBorrowed = this.getBorrowedView(),
                    storeBorrowed = gridBorrowed.getStore(),
                    storeBook = Ext.getStore('BookStore'),
                    selectModel = gridBorrowed.getSelectionModel(),
                    selectedBooks = selectModel.getSelection(),
                    selected = selectedBooks.length;

        storeBook.add(selectedBooks);
        storeBorrowed.remove(selectedBooks);
    },

    onBackBtnClick: function() {
        this.getBooksCont().show();
            this.getBorrowedCont().hide();
    },

    onRemoveBookBtnClick: function() {
        var gridBook = this.getBookListView(),
            storeBook = gridBook.getStore(),
            selectModel = gridBook.getSelectionModel(),
            selectedBooks = selectModel.getSelection(),
            selected = selectedBooks.length;

            storeBook.remove(selectedBooks);
    },

    onEditBookBtnClick: function() {
        var bkWin = Ext.create('Libray.view.addEditWin');
            bkWin.show();
    },

    onGridpanelSelectionChange: function() {
                var gridBook = this.getBookListView(),
                    storeBook = gridBook.getStore(),
                    selectModel = gridBook.getSelectionModel(),
                    selectedBooks = selectModel.getSelection(),
                    selected = selectedBooks.length;


        if (selected < 1 || selected > 1) {
            this.getEditBookDetails().disable();
        } else {
            this.getEditBookDetails().enable();
        }

    },

    onSubmitBookBtnClick: function() {
        var gridBook = this.getBookListView(),
            storeBook = gridBook.getStore(),
            selectModel = gridBook.getSelectionModel(),
            selectedBooks = selectModel.getSelection(),
            selected = selectedBooks.length;

        // this.setTitle()
        // selectedBooks[0].data.title;
        var editTitle = this.getTitle().getValue(),
            editAuthor = this.getAuthor().getValue(),
            editPublisher = this.getPublisher().getValue();

        selectedBooks[0].data.title = editTitle;
        selectedBooks[0].data.author = editAuthor;
        selectedBooks[0].data.publisher = editPublisher;
        gridBook.refresh();

         Ext.MessageBox.alert ('Information', 'Bookd details updated!');
        this.getAddEditWin().destroy();
    },

    onCancelBookBtnClick: function() {
        this.getAddEditWin().destroy();
    },

    onAddBookWinShowBtnClick: function() {
        Ext.create('Libray.view.addWin').show();
    },

    onAddBookBtnClick: function() {
        var gridBook = this.getBookListView(),
                                    storeBook = gridBook.getStore(),
                                    selectModel = gridBook.getSelectionModel(),
                                    selectedBooks = selectModel.getSelection(),
        titleA = this.getTitleAdd().getValue(),
            authorA = this.getAuthorAdd().getValue(),
            publisherA = this.getPublisherAdd().getValue();
        if(!(Ext.isEmpty(titleA))&&!Ext.isEmpty(authorA) && !Ext.isEmpty(publisherA)){

            var book = {
                title: this.getTitleAdd().getValue(),
                author: this.getAuthorAdd().getValue(),
                publisher: this.getPublisherAdd().getValue()
            };
            storeBook.add(book);
            Ext.MessageBox.alert ('Information', 'New book has been stored!');
            this.getAddWin().destroy();
        } else {
            Ext.MessageBox.alert ('Warning', 'Please complete all fields!');
        }

    },

    onCancelBookAddBtnClick: function() {
        this.getAddWin().destroy();
    },

    onAddEditWinShow: function(component, eOpts) {
        var gridBook = this.getBookListView(),
                            storeBook = gridBook.getStore(),
                            selectModel = gridBook.getSelectionModel(),
                            selectedBooks = selectModel.getSelection(),
                            selected = selectedBooks.length,
            title = selectedBooks[0].data.title,
            author = selectedBooks[0].data.author,
            publisher = selectedBooks[0].data.publisher;

        this.getTitle().setValue(title);
        this.getAuthor().setValue(author);
        this.getPublisher().setValue(publisher);
    },

    init: function(application) {
        this.control({
            "#borrowBtn": {
                click: this.onBorrowBtnClick
            },
            "#returnBookBtn": {
                click: this.onReturnBookBtnClick
            },
            "#backBtn": {
                click: this.onBackBtnClick
            },
            "#removeBookBtn": {
                click: this.onRemoveBookBtnClick
            },
            "#editBookBtn": {
                click: this.onEditBookBtnClick
            },
            "#bookListGrid": {
                selectionchange: this.onGridpanelSelectionChange
            },
            "#submitBookBtn": {
                click: this.onSubmitBookBtnClick
            },
            "#cancelBookBtn": {
                click: this.onCancelBookBtnClick
            },
            "#addBookWinShowBtn": {
                click: this.onAddBookWinShowBtnClick
            },
            "#addBookBtn": {
                click: this.onAddBookBtnClick
            },
            "#cancelBookAddBtn": {
                click: this.onCancelBookAddBtnClick
            },
            "#addEditWin": {
                show: this.onAddEditWinShow
            }
        });
    }

});
