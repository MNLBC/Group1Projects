/*
 * File: app/controller/Windows.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BurgerQueen.controller.Windows', {
    extend: 'Ext.app.Controller',

    mixins: {
        GlobalUtil: 'com.oocl.mnlbc.GlobalMessage'
    },

    oLoadingMessageMask: null,

    refs: [
        {
            ref: 'productName',
            selector: '#ProductName'
        },
        {
            ref: 'productPrice',
            selector: '#ProductPrice'
        },
        {
            ref: 'productDescription',
            selector: '#ProductDescription'
        },
        {
            ref: 'productQuantity',
            selector: '#ProductQuantity'
        },
        {
            ref: 'productImage',
            selector: '#ProductImage'
        },
        {
            ref: 'productViewWindow',
            selector: '#ProductView'
        },
        {
            ref: 'totalItems',
            selector: '#totalItems'
        },
        {
            ref: 'trayWindow',
            selector: '#TrayWindow'
        },
        {
            ref: 'trayGrid',
            selector: '#trayGrid'
        },
        {
            ref: 'totalAmount',
            selector: '#totalAmount'
        },
        {
            ref: 'productId',
            selector: '#productId'
        },
        {
            ref: 'registerForm',
            selector: '#registerForm'
        },
        {
            ref: 'chickensButton',
            selector: '#chickensButton'
        },
        {
            ref: 'loginForm',
            selector: '#loginForm'
        },
        {
            ref: 'registerWindow',
            selector: '#registerWindow'
        },
        {
            ref: 'beveragesButton',
            selector: '#beveragesButton'
        },
        {
            ref: 'loginWindow',
            selector: '#loginWindow'
        },
        {
            ref: 'burgersButton',
            selector: '#burgersButton'
        },
        {
            ref: 'dessertsButton',
            selector: '#dessertsButton'
        },
        {
            ref: 'registerButton',
            selector: '#registerButton'
        },
        {
            ref: 'trayButton',
            selector: '#trayButton'
        },
        {
            ref: 'sidesButton',
            selector: '#sidesButton'
        },
        {
            ref: 'loginButton',
            selector: '#loginButton'
        },
        {
            ref: 'logoutButton',
            selector: '#logoutButton'
        },
        {
            ref: 'myProfileButton',
            selector: '#myProfileButton'
        },
        {
            ref: 'addCartButton',
            selector: '#AddCartButton'
        },
        {
            ref: 'activeUsersCount',
            selector: '#activeUsersCount'
        },
        {
            ref: 'products',
            selector: '#Products'
        }
    ],

    onProductViewActivate: function(window, eOpts) {
        var data = window.selectedProduct,
            img = this.getProductImage(),
            productName = this.getProductName(),
            productDescription = this.getProductDescription(),
            productPrice = this.getProductPrice(),
            productId = this.getProductId();

        img.setSrc(data.Image);
        productName.setValue(data.Name);
        productDescription.setValue(data.Description);
        productPrice.setValue(data.Price);
        productId.setValue(data.Id);

        Ext.Ajax.request({
                        url : 'hasLogged',
                        params : {

                        },
                        scope : this,
                        success : function(response) {

                            if(response.responseText === 'false'){
                                this.getProductQuantity().hide();
                                this.getAddCartButton().hide();
                            }else{
                                this.getProductQuantity().show();
                                this.getAddCartButton().show();
                            }
                        }
        });


    },

    onAddCartButtonClick: function() {

        var trayStore = Ext.getStore('TrayStore'),
            productName = this.getProductName().getValue(),
            productQuantity = this.getProductQuantity().getValue(),
            productPrice = this.getProductPrice().getValue(),
            productId= this.getProductId().getValue();

        var tray = {
            Id: productId,
            Name: productName,
            Quantity: productQuantity,
            Price: productPrice,
            Total: productQuantity * productPrice
        };


        var totalItems = 0;
            var index = trayStore.find('Id', productId);
            if(index === -1){
                trayStore.add(tray);
            }else{
                var currentQuantity = trayStore.getAt(index).data.Quantity,
                    replaceQuantity = currentQuantity + productQuantity;
                    trayStore.getAt(index).data.Quantity = replaceQuantity;

        //         totalItems += replaceQuantity;
        //      this.getTotalItems().setValue(totalItems);
            }
        //     Ext.create('ProductViewWindow').hide();
        Ext.Msg.alert('Status', this.added_to_cart);
        console.log(this.invalid_login);
        this.getProductViewWindow().destroy();
    },

    onCancelCheckoutBtnClick: function() {
        this.getTrayWindow().destroy();
    },

    onRemoveItemBtnClick: function() {
        var trayStore = Ext.getStore('TrayStore');

        var trayGrid = this.getTrayGrid(),
            selectModel = trayGrid.getSelectionModel(),
            selectedProduct = selectModel.getSelection();


            if(!Ext.isEmpty(selectedProduct)){
                var selectedPrice = selectedProduct[0].data.Price,
                    selectedQty = selectedProduct[0].data.Quantity;

                var currentQty = this.getTotalItems().getValue(),
                    currentAmount = this.getTotalAmount().getValue();

                var updatedQty = currentQty - selectedQty,
                    updatedAmount = currentAmount - selectedPrice;

                trayStore.remove(selectedProduct);
                this.getTotalItems().setValue(updatedQty);
                this.getTotalAmount().setValue(updatedAmount);

                //call on show event of tray
                this.onTrayWindowShow();


            }else{
                Ext.MessageBox.alert('Error','Please select an item to remove');

            }


    },

    onTrayWindowShow: function(component, eOpts) {
            var grid = this.getTrayGrid(),
                store = grid.getStore(),
                totalQuantity = 0,
                totalAmount = 0,
                records = store.getRange();

            Ext.each(records,function(record){
                   totalQuantity += record.data.Quantity;
                    totalAmount += record.data.Total;
            });

            console.log(totalQuantity, totalAmount);

            this.getTotalItems().setValue(totalQuantity);
            this.getTotalAmount().setValue(totalAmount);

    },

    onRegisterWindowButtonClick: function() {
        var form = this.getRegisterForm(),
            username = form.getValues().username,
            password = form.getValues().password,
            firstname = form.getValues().firstname,
            middlename = form.getValues().middlename,
            lastname = form.getValues().lastname,
            address = form.getValues().address,
            contactno = form.getValues().contactno,
            email = form.getValues().email,
            gender = form.getValues().gender;
        if(form.isValid()){
            Ext.Ajax.request({
                url : 'user/addUser',
                params : {
                    'username':username,
                    'password':password,
                    'firstname':firstname,
                    'middlename':middlename,
                    'lastname':lastname,
                    'address':address,
                    'contactno':contactno,
                    'email':email,
                    'gender':gender
                },
                scope : this,
                success : function(response) {
                    var data = response.responseText;
                    if(data ==='success'){
                        Ext.MessageBox.alert('Sucess', this.success_registration);
                        this.getRegisterWindow().destroy();
                    }
                    if(data === 'username'){
                        Ext.MessageBox.alert('Error', this.existing_username);
                    }
                    if(data === 'email'){
                        Ext.MessageBox.alert('Error', this.existing_email);
                    }
                }
            });
        }else{
            Ext.MessageBox.alert('Error', 'Invalid user input, please check fields');
        }
    },

    onLoginWindowButtonClick: function() {

                var form = this.getLoginForm(),
                            username = form.getValues().username,
                            password = form.getValues().password;

                    if(form.isValid()){
                        Ext.Ajax.request({
                             url : 'login',
                             params : {
                                 'username':username,
                                 'password':password
                             },
                             scope : this,
                             success : function(response) {
                                 var data = response.responseText;
                                 if(!Ext.isEmpty(data)){
                                     var decodedData = Ext.decode(data);
                                     if(decodedData.disabled){
                                         Ext.MessageBox.alert('Error','Blocked');
                                     }else{
                                         Ext.MessageBox.alert('Success','Welcome!');
                                         currentLoginUser = decodedData;
                                         this.getLoginButton().hide();
                                         this.getLogoutButton().show();
                                         this.getRegisterButton().hide();
                                         this.getMyProfileButton().show();
                                         this.getTrayButton().show();
                                         this.activeUserCounter();
                                         this.getMyProfileButton().setText('Welcome, '+ decodedData.username);
                                         this.getLoginWindow().destroy();
                                         this.getProducts().show();
                                     }
                                 }else{
                                     Ext.MessageBox.alert('Error','Invalid Username/Password');
                                 }
                             }
                        });
                    }


    },

    onCancelRegisterButtonClick: function() {
                this.getRegisterWindow().destroy();
    },

    onCancelLoginButtonClick: function() {
                this.getLoginWindow().destroy();
    },

    onProductViewCloseClick: function() {
         this.getProductViewWindow().destroy();
    },

    onCheckoutBtnClick: function() {
        var store = Ext.getStore('TrayStore');

        if(Ext.isEmpty(store.getRange())){
            Ext.MessageBox.alert('Error','Your cart is empty');
            return;
        }


        var orderItemsArray = [];
        store.each(function(record){
            var recordId = record.data.Id,
                recordQuantity = record.data.Quantity;

            var orderItem = {
                id: 0,
                quantity: recordQuantity,
                mealId: recordId
            };
            orderItemsArray.push(orderItem);
        });

        var order = {
            userId: 1,
            orderItemList : orderItemsArray,
            status : 'WAITING'
        };

        Ext.Ajax.request({
            url : 'orderItem/addOrderItem',
            params : { order:Ext.JSON.encode(order)},
            success : function(response) {
                var data = response.responseText;
                if(data === 'success'){
                    store.removeAll();
                    Ext.MessageBox.alert('Success', 'Order success, please wait for order delivery.');
                    this.getTrayWindow().destroy();
                }
                else{
                    Ext.MessageBox.alert('Error', 'Failed to checkout your order.');
                }
            }
        });
    },

    onTransactionDetailsActivate: function(window, eOpts) {
                var transactionData = window.transaction;
                var id = transactionData.data.Id;

                Ext.Ajax.request({
                            url : 'orderItem/getAllOrderItemsById',
                            params : {
                                orderId:id
                            },
                            scope : this,

                            success : function(response) {
                                var transacDetailsStore = Ext.getStore('TransactionDetailsStore');
                                var recordData = Ext.JSON.decode(response.responseText);
                                    Ext.each(recordData, function(rec){
                                       var orderItems = {
                                        Id:rec.id,
                                        Quantity:rec.quantity,
                                        Meal:rec.mealId
                                    };

                                    transacDetailsStore.add(orderItems);
                                });



                            }
                        });
    },

    activeUserCounter: function() {

            Ext.Ajax.request({
                    url : 'getLoggedUsers',
                    params : {

                    },
                    scope : this,
                    success : function(response) {
                        var data = Ext.decode(response.responseText);
                        activeUsers = data;
                        var store = activeUserStore;
                        store.removeAll();
                       this.getActiveUsersCount().setValue(data.length);
                        Ext.each(data, function(record){
                            store.add({username:record.username});
                        });
                    }
                });
    },

    hideLoadingMessageMask: function() {

                            if (this.oLoadingMessageMask) {
                               this.oLoadingMessageMask.hide();
                            }
    },

    showLoadingMessageMask: function() {
                            if (!this.oLoadingMessageMask) {
                               this.oLoadingMessageMask = new Ext.LoadMask(Ext.getBody(), {
                                  msg : "Loading, please wait..."
                               });
                            }
                            this.oLoadingMessageMask.show();
    },

    init: function(application) {
        this.control({
            "#ProductView": {
                activate: this.onProductViewActivate
            },
            "#AddCartButton": {
                click: this.onAddCartButtonClick
            },
            "#cancelCheckoutBtn": {
                click: this.onCancelCheckoutBtnClick
            },
            "#removeItemBtn": {
                click: this.onRemoveItemBtnClick
            },
            "#TrayWindow": {
                show: this.onTrayWindowShow
            },
            "#registerWindowButton": {
                click: this.onRegisterWindowButtonClick
            },
            "#loginWindowButton": {
                click: this.onLoginWindowButtonClick
            },
            "#cancelRegisterButton": {
                click: this.onCancelRegisterButtonClick
            },
            "#cancelLoginButton": {
                click: this.onCancelLoginButtonClick
            },
            "#productViewClose": {
                click: this.onProductViewCloseClick
            },
            "#checkoutBtn": {
                click: this.onCheckoutBtnClick
            },
            "#TransactionDetails": {
                activate: this.onTransactionDetailsActivate
            }
        });
    }

});
