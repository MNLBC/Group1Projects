/*
 * File: app/controller/Windows.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BurgerQueen.controller.Windows', {
    extend: 'Ext.app.Controller',

    mixins: {
        GlobalUtill: 'com.oocl.mnlbc.GlobalMessage'
    },

    oLoadingMessageMask: null,

    refs: [
        {
            ref: 'productName',
            selector: '#ProductName'
        },
        {
            ref: 'productPrice',
            selector: '#ProductPrice'
        },
        {
            ref: 'productDescription',
            selector: '#ProductDescription'
        },
        {
            ref: 'productQuantity',
            selector: '#ProductQuantity'
        },
        {
            ref: 'productImage',
            selector: '#ProductImage'
        },
        {
            ref: 'productViewWindow',
            selector: '#ProductView'
        },
        {
            ref: 'totalItems',
            selector: '#totalItems'
        },
        {
            ref: 'trayWindow',
            selector: '#TrayWindow'
        },
        {
            ref: 'trayGrid',
            selector: '#trayGrid'
        },
        {
            ref: 'totalAmount',
            selector: '#totalAmount'
        },
        {
            ref: 'productId',
            selector: '#productId'
        },
        {
            ref: 'registerForm',
            selector: '#registerForm'
        },
        {
            ref: 'loginForm',
            selector: '#loginForm'
        },
        {
            ref: 'registerWindow',
            selector: '#registerWindow'
        },
        {
            ref: 'loginWindow',
            selector: '#loginWindow'
        }
    ],

    onProductViewActivate: function(window, eOpts) {
        Ext.getBody().mask();
        var data = window.selectedProduct,
            img = this.getProductImage(),
            productName = this.getProductName(),
            productDescription = this.getProductDescription(),
            productPrice = this.getProductPrice(),
            productId = this.getProductId();

        img.setSrc(data.Image);
        productName.setValue(data.Name);
        productDescription.setValue(data.Description);
        productPrice.setValue(data.Price);
        productId.setValue(data.Id);
    },

    onCancelCartButtonClick: function() {
                this.getProductViewWindow().destroy();
                Ext.getBody().unmask();
    },

    onAddCartButtonClick: function() {

        var trayStore = Ext.getStore('TrayStore'),
            productName = this.getProductName().getValue(),
            productQuantity = this.getProductQuantity().getValue(),
            productPrice = this.getProductPrice().getValue(),
            productId= this.getProductId().getValue();

        var tray = {
            Id: productId,
            Name: productName,
            Quantity: productQuantity,
            Price: productPrice,
            Total: productQuantity * productPrice
        };


        var totalItems = 0;
            var index = trayStore.find('Id', productId);
            if(index === -1){
                trayStore.add(tray);
            }else{
                var currentQuantity = trayStore.getAt(index).data.Quantity,
                    replaceQuantity = currentQuantity + productQuantity;
                    trayStore.getAt(index).data.Quantity = replaceQuantity;

        //         totalItems += replaceQuantity;
        //      this.getTotalItems().setValue(totalItems);
            }
        //     Ext.create('ProductViewWindow').hide();
        Ext.Msg.alert('Status', this.added_to_cart);
        console.log(this.invalid_login);
        this.getProductViewWindow().destroy();
        Ext.getBody().unmask();
    },

    onCancelCheckoutBtnClick: function() {
        this.getTrayWindow().destroy();
        Ext.getBody().unmask();
    },

    onRemoveItemBtnClick: function() {
        var trayStore = Ext.getStore('TrayStore');

        var trayGrid = this.getTrayGrid(),
            selectModel = trayGrid.getSelectionModel(),
            selectedProduct = selectModel.getSelection(),
            selectedQty = selectedProduct[0].data.Quantity,
            selectedPrice = selectedProduct[0].data.Price;

        var currentQty = this.getTotalItems().getValue(),
            currentAmount = this.getTotalAmount().getValue();

        var updatedQty = currentQty - selectedQty,
            updatedAmount = currentAmount - selectedPrice;

        trayStore.remove(selectedProduct);
        this.getTotalItems().setValue(updatedQty);
        this.getTotalAmount().setValue(updatedAmount);



    },

    onTrayWindowShow: function(component, eOpts) {
            var grid = this.getTrayGrid(),
                store = grid.getStore(),
                totalQuantity = 0,
                totalAmount = 0,
                records = store.getRange();

            Ext.each(records,function(record){
                   totalQuantity += record.data.Quantity;
                    totalAmount += record.data.Total;
            });

            console.log(totalQuantity, totalAmount);

            this.getTotalItems().setValue(totalQuantity);
            this.getTotalAmount().setValue(totalAmount);

    },

    onRegisterWindowButtonClick: function() {
                var form = this.getRegisterForm(),
                username = form.getValues().username,
                    password = form.getValues().password,
                    firstname = form.getValues().firstname,
                    middlename = form.getValues().middlename,
                    lastname = form.getValues().lastname,
                    address = form.getValues().address,
                    contactno = form.getValues().contactno,
                    email = form.getValues().email,
                    gender = form.getValues().gender;
                if(form.isValid()){
                     Ext.Ajax.request({
                             url : 'user/addUser',
                             params : {
                                 'username':username,
                                 'password':password,
                                 'firstname':firstname,
                                 'middlename':middlename,
                                 'lastname':lastname,
                                 'address':address,
                                 'contactno':contactno,
                                 'email':email,
                                 'gender':gender
                             },
                             scope : this,
                             success : function(response) {
                                 close();
                             }
                        });
                }
    },

    onLoginWindowButtonClick: function() {
                var form = this.getLoginForm(),
                            username = form.getValues().username,
                            password = form.getValues().password;

                    if(form.isValid()){
                        Ext.Ajax.request({
                             url : 'login',
                             params : {
                                 'username':username,
                                 'password':password
                             },
                             scope : this,
                             success : function(response) {
                                 close();
                             }
                        });
                    }
    },

    onCancelRegisterButtonClick: function() {
                this.getRegisterWindow().destroy();
                Ext.getBody().unmask();
    },

    onCancelLoginButtonClick: function() {
                this.getLoginWindow().destroy();
                Ext.getBody().unmask();
    },

    showLoadingMessageMask: function() {
                            if (!this.oLoadingMessageMask) {
                               this.oLoadingMessageMask = new Ext.LoadMask(Ext.getBody(), {
                                  msg : "Loading, please wait..."
                               });
                            }
                            this.oLoadingMessageMask.show();
    },

    hideLoadingMessageMask: function() {

                            if (this.oLoadingMessageMask) {
                               this.oLoadingMessageMask.hide();
                            }
    },

    init: function(application) {
        this.control({
            "#ProductView": {
                activate: this.onProductViewActivate
            },
            "#CancelCartButton": {
                click: this.onCancelCartButtonClick
            },
            "#AddCartButton": {
                click: this.onAddCartButtonClick
            },
            "#cancelCheckoutBtn": {
                click: this.onCancelCheckoutBtnClick
            },
            "#removeItemBtn": {
                click: this.onRemoveItemBtnClick
            },
            "#TrayWindow": {
                show: this.onTrayWindowShow
            },
            "#registerWindowButton": {
                click: this.onRegisterWindowButtonClick
            },
            "#loginWindowButton": {
                click: this.onLoginWindowButtonClick
            },
            "#cancelRegisterButton": {
                click: this.onCancelRegisterButtonClick
            },
            "#cancelLoginButton": {
                click: this.onCancelLoginButtonClick
            }
        });
    }

});
