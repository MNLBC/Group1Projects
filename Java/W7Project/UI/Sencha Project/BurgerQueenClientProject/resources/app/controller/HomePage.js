/*
 * File: resources/app/controller/HomePage.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BurgerQueen.controller.HomePage', {
    extend: 'Ext.app.Controller',

    mixins: {
        GlobalUtil: 'com.oocl.mnlbc.GlobalMessage'
    },

    refs: [
        {
            ref: 'addressProfile',
            selector: '#addressProfile'
        },
        {
            ref: 'adminCommentsPanel',
            selector: '#AdminCommentsPanel'
        },
        {
            ref: 'adminProductsPanel',
            selector: '#AdminProductsPanel'
        },
        {
            ref: 'adminTransactionsPanel',
            selector: '#AdminTransactionsPanel'
        },
        {
            ref: 'adminUserPanel',
            selector: '#AdminUserPanel'
        },
        {
            ref: 'beveragesButton',
            selector: '#beveragesButton'
        },
        {
            ref: 'chickensButton',
            selector: '#chickensButton'
        },
        {
            ref: 'commentsGrid',
            selector: '#commentsGrid'
        },
        {
            ref: 'contactNumProfile',
            selector: '#contactnumProfile'
        },
        {
            ref: 'dessertsButton',
            selector: '#dessertsButton'
        },
        {
            ref: 'emailProfile',
            selector: '#emailProfile'
        },
        {
            ref: 'fullnameProfile',
            selector: '#fullnameProfile'
        },
        {
            ref: 'loginButton',
            selector: '#loginButton'
        },
        {
            ref: 'logoutButton',
            selector: '#logoutButton'
        },
        {
            ref: 'myProfileButton',
            selector: '#myProfileButton'
        },
        {
            ref: 'products',
            selector: '#Products'
        },
        {
            ref: 'productGrid',
            selector: '#ProductGrid'
        },
        {
            ref: 'productViewWindow',
            selector: '#ProductView'
        },
        {
            ref: 'registerButton',
            selector: '#registerButton'
        },
        {
            ref: 'sidesButton',
            selector: '#sidesButton'
        },
        {
            ref: 'userProfile',
            selector: '#UserProfile'
        },
        {
            ref: 'transacHistoryGrid',
            selector: '#TransacHistoryGrid'
        },
        {
            ref: 'trayButton',
            selector: '#trayButton'
        },
        {
            ref: 'usernameProfile',
            selector: '#usernameProfile'
        },
        {
            ref: 'userGrid',
            selector: '#userGrid'
        }
    ],

    onLoginButtonClick: function() {
                Ext.create('BurgerQueen.view.LoginWindow').show();
    },

    onBeveragesButtonClick: function() {
            var productStore = this.productStore;
            this.getProducts().show();
            this.getUserProfile().hide();
            productStore.clearFilter();
            productStore.filter('Category','Beverages');
    },

    onBurgersButtonClick: function() {
            var productStore = this.productStore;
            this.getProducts().show();
            this.getUserProfile().hide();
            productStore.clearFilter();
            productStore.filter('Category','Burgers');
    },

    onChickensButtonClick: function() {
            var productStore = this.productStore;
            this.getProducts().show();
            this.getUserProfile().hide();
            productStore.clearFilter();
            productStore.filter('Category','Chickens');
    },

    onDessertsButtonClick: function() {
            var productStore = this.productStore;
            this.getProducts().show();
            this.getUserProfile().hide();
            productStore.clearFilter();
            productStore.filter('Category','Desserts');
    },

    onProductGridItemDblClick: function() {
        var productStore = this.productStore,
            productGrid = this.getProductGrid(),
            selectModel = productGrid.getSelectionModel(),
            selectedProduct = selectModel.getSelection()[0].data;

        var productWin = Ext.create('BurgerQueen.view.ProductViewWindow',{selectedProduct: selectedProduct});
        productWin.show();

        Ext.Ajax.request({
            url : 'hasLogged',
            params : {},
            scope : this,
            success : function(response) {
                if(response.responseText === 'true'){
                    Ext.getCmp('commentFoodForm').show();
                }
            }
        });
    },

    onTrayBtnClick: function() {
         Ext.create('BurgerQueen.view.TrayWindow').show();
    },

    onBurgerQueenRender: function() {
        Ext.Ajax.request({
            url : 'getUserSession',
            params : {},
            scope : this,
            success : function(response) {
                var data = Ext.decode(response.responseText);
                if(!Ext.isEmpty(data)){
                    currentLoginUser = data;
                    this.displayForSessions();
                }
            }
        });
        Ext.Ajax.request({
            url : 'visitor',
            params : {},
            scope : this,
            success : function(response) {
                var data = Ext.decode(response.responseText);
                console.log(data);
            }
        });

        var store = Ext.getStore('ProductStore');
        Ext.Ajax.request({
            url : 'meal/getAllMeals',
            params : {},
            scope : this,
            success : function(response) {
                var data = Ext.JSON.decode(response.responseText);
                Ext.each(data, function(record){
                    var product = {
                        Id:record.id,
                        Code:record.code,
                        Name:record.name,
                        Description:record.description,
                        Category:record.category,
                        Price:record.price,
                        Image:record.image,
                        Points:record.points
                    };
                    store.add(product);
                });
            }
        });
    },

    onUserProfileShow: function(component, eOpts) {
        if(Ext.isEmpty(currentLoginUser)){
            return;
        }
        var firstName = currentLoginUser.firstname,
            middleName = currentLoginUser.middlename,
            lastName =currentLoginUser.lastname,
            fullName = lastName + ', ' + firstName + " " + middleName;

        this.getUsernameProfile().setValue(currentLoginUser.username);
        this.getFullnameProfile().setValue(fullName);
        this.getAddressProfile().setValue(currentLoginUser.address);
        this.getEmailProfile().setValue(currentLoginUser.email);
        this.getContactNumProfile().setValue(currentLoginUser.contactno);
        Ext.getCmp('userLevel').setValue(currentLoginUser.userLevel);

        Ext.Ajax.request({
            url : 'order/getAllOrderByUserId/'+currentLoginUser.id,
            params : {},
            scope : this,
            success : function(response) {
                var userTransactions = Ext.JSON.decode(response.responseText),
                    transactionStore = Ext.getStore('TransactionStore');
                transactionStore.removeAll();
                Ext.each(userTransactions,function(record){
                    var transaction = {
                        Id : record.id,
                        UserId: record.userId,
                        Status : record.status
                    };
                    transactionStore.add(transaction);
                });
            }
        });
    },

    onAllCategoriesButtonClick: function() {
            var productStore = this.productStore;
            this.getProducts().show();
            this.getUserProfile().hide();
            productStore.clearFilter();
    },

    onSidesButtonClick: function() {
            var productStore = this.productStore;
            this.getProducts().show();
            this.getUserProfile().hide();
            productStore.clearFilter();
            productStore.filter('Category','Sides');

    },

    onLogoutButtonClick: function() {


        Ext.Msg.confirm("Confirmation", "Are you sure you want to logout?", function(btnText){
            if(btnText === "yes"){
                var trays = [];
                task.stop();
                var store = Ext.getStore('TrayStore');

                store.each(function(record){
                    var trayItem = {
                        id:0,
                        user:{
                            id:currentLoginUser.id
                        },
                        meal:{
                            id:record.data.Id
                        },
                        quantity:record.data.Quantity
                    };
                    trays.push(trayItem);
                });

                this.addToTray(trays);
                Ext.getCmp('toolBarCustomer').show();
                Ext.getCmp('toolBarAdmin').hide();
                this.getUserProfile().hide();
                this.getTrayButton().hide();
                this.getRegisterButton().show();
                this.getLoginButton().show();
                this.getLogoutButton().hide();
                this.getMyProfileButton().hide();
                Ext.getCmp('AdminUserPanel').hide();
                Ext.getCmp('AdminCommentsPanel').hide();
                this.getProducts().show();

                Ext.Ajax.request({
                    url : 'logout',
                    params : {

                    },
                    scope : this,
                    success : function(response) {
                        Ext.Ajax.request({
                            url : 'message/closeClient',
                            params : {
                                userId:currentLoginUser.id
                            },
                            scope : this,
                            success : function(response) {
                            }
                        });
                    }
                });
                Ext.getStore('TrayStore').removeAll();
                Ext.getStore('TransactionStore').removeAll();
                Ext.getStore('TransactionDetailsStore').removeAll();
            }
        }, this);
    },

    onTrayButtonClick: function() {
         Ext.create('BurgerQueen.view.TrayWindow').show();
    },

    onRegisterButtonClick: function() {
               Ext.create('BurgerQueen.view.RegisterWindow').show();
    },

    onMyProfileButtonClick: function() {
        this.getProducts().hide();
        this.getUserProfile().show();
        var userStore = Ext.getStore('UsersStore').getRange();
        Ext.each(userStore, function(record){
            var userName = record.get('userName'),
                firstName = record.get('firstName'),
                middleName =  record.get('middleName'),
                lastName = record.get('lastName'),
                fullName = lastName + ', ' + firstName + " " + middleName,
                address = record.get('address'),
                email = record.get('email'),
                contactNum = record.get('contactNum');

            this.getUserNameField().setValue(userName);
            this.getFullNameField().setValue(fullName);
            this.getAddressField().setValue(address);
            this.getEmailField().setValue(email);
            this.getContactNumProfile().setValue(currentLoginUser.contact);
        });
    },

    onBtnProductsClick: function() {
        Ext.getCmp('AdminProductsPanel').show();
        this.getUserProfile().hide();
        this.getAdminCommentsPanel().hide();
        this.getAdminTransactionsPanel().hide();
        this.getAdminUserPanel().hide();

        console.log('Product');

        var store = Ext.getStore('ProductStore');
        store.removeAll();
        Ext.Ajax.request({
            url : 'meal/getAllMeals',
            params : {},
            scope : this,
            success : function(response) {
                var data = Ext.JSON.decode(response.responseText);
                Ext.each(data, function(record){
                    var product = {
                        Id:record.id,
                        Code:record.code,
                        Name:record.name,
                        Description:record.description,
                        Category:record.category,
                        Price:record.price,
                        Image:record.image,
                        Points:record.points
                    };
                    store.add(product);
                });
            }
        });

        Ext.Ajax.request({
            url : 'getUserSession',
            params : { },
            scope : this,
            success : function(response) {
                var data = Ext.decode(response.responseText);
                if(!Ext.isEmpty(data)){
                    currentLoginUser = data;
                    this.displayForSessions();
                }
            }
        });

        var userStore = Ext.getStore('UsersStore');
        Ext.Ajax.request({
            url : 'user/getAllUsers',
            params : {},
            scope : this,
            success : function(response) {
                var data = Ext.decode(response.responseText);
                Ext.each(data, function(record){
                    var users = {
                        id:record.id,
                        Username:record.username,
                        Password:record.password,
                        Firstname:record.firstname,
                        Middlename:record.middlename,
                        Lastname:record.lastname,
                        Gender:record.gender,
                        Email:record.email,
                        Address:record.address,
                        Contact:record.contactno,
                        Disabled:record.isDisabled,
                        Type:record.type,
                        Level:record.userLevel,
                        Points:record.points
                    };
                    userStore.add(users);
                });
            }
        });
    },

    onBtnTransactionsClick: function() {
            this.getProducts().hide();
            this.getUserProfile().hide();
            this.getAdminCommentsPanel().hide();
            this.getAdminUserPanel().hide();
            this.getAdminProductsPanel().hide();
            this.getAdminTransactionsPanel().show();
    },

    onBtnCommentsClick: function() {
            this.getProducts().hide();
            this.getUserProfile().hide();
            this.getAdminUserPanel().hide();
            this.getAdminProductsPanel().hide();
            this.getAdminTransactionsPanel().hide();
            this.getAdminCommentsPanel().show();

            var store = Ext.getStore('CommentsStore');
            store.removeAll();
            Ext.Ajax.request({
                url : 'http://localhost:' + window.location.port + '/mnlbcjms/viewMessage',
                params : {},
                scope : this,
                success : function(response) {
                    var data = Ext.JSON.decode(response.responseText);
                    Ext.each(data, function(record){
                        var username = record.username,
                            message = record.message;
                        var comment = {
                            username: username,
                            comments: message
                        };
                        store.add(comment);
                    });
                }
            });
    },

    onBtnAcceptClick: function() {
        var commentsStore = Ext.getStore('CommentsStore'),
            commentsGrid = this.getCommentsGrid(),
            selectModel = commentsGrid.getSelectionModel(),
            selectedComments = selectModel.getSelection();

        if(!Ext.isEmpty(selectedComments)){
            var selectedUser = selectedComments[0].data.username,
                selecteComment = selectedComments[0].data.comments;
            commentsStore.remove(selectedComments);

            Ext.Ajax.request({
                url : 'user/getUserByUserName/' + selectedUser,
                params : {},
                scope : this,
                success : function(response) {
                    var user = Ext.JSON.decode(response.responseText);
                    user.points += 0.5;

                    Ext.Ajax.request({
                        url:'user/updateUser',
                        headers: { 'Content-Type': 'application/json',
                                  'Accept': 'application/json'},
                        jsonData:user,
                        scope:this,
                        success : function(response) {
                            Ext.MessageBox.alert('Success','Points added to user');
                        }
                    });
                }
            });
        }else{
            Ext.MessageBox.alert('Error','Please select an item.');
        }
    },

    onProfileOpenChangePasswordWindowClick: function() {
               Ext.create('BurgerQueen.view.ProfileChangePasswordWindow').show();
    },

    onLaunch: function() {
                this.productStore = Ext.getStore('ProductStore');
                activeUserStore = Ext.create('BurgerQueen.store.ActiveUserStore');
    },

    addToTray: function(trays) {
            Ext.Ajax.request({
                url : 'tray/addTray',
                params : {
                    'trays':Ext.JSON.encode(trays)
                },
                scope : this,
                success : function(response) {

                }
            });
    },

    showLoadingMessageMask: function() {
            if (!this.oLoadingMessageMask) {
                this.oLoadingMessageMask = new Ext.LoadMask(Ext.getBody(), {
                    msg : "Loading, please wait..."
                });
            }
            this.oLoadingMessageMask.show();
    },

    hideLoadingMessageMask: function() {
            if (this.oLoadingMessageMask) {
                this.oLoadingMessageMask.hide();
            }
    },

    displayForSessions: function() {
            this.getLoginButton().hide();
            this.getLogoutButton().show();
            this.getRegisterButton().hide();
            this.getMyProfileButton().show();
            this.getTrayButton().show();
            this.getMyProfileButton().show();
            this.getMyProfileButton().setText('Welcome, '+ currentLoginUser.username + '! |');
            this.getProducts().show();

            if(currentLoginUser.type ==='admin'){
                Ext.getCmp('toolBarCustomer').hide();
                Ext.getCmp('toolBarAdmin').show();
            }

            var trayStore = Ext.getStore('TrayStore');
            trayStore.removeAll();

            Ext.Ajax.request({
                url : 'tray/getTraySession',
                params : {
                },
                scope : this,
                success : function(response) {
                    var data = Ext.JSON.decode(response.responseText);
                    Ext.each(data,function(record){
                        trayStore.add(record);
                    });
                }
            });
    },

    init: function(application) {
        this.control({
            "#loginButton": {
                click: this.onLoginButtonClick
            },
            "#beveragesButton": {
                click: this.onBeveragesButtonClick
            },
            "#burgersButton": {
                click: this.onBurgersButtonClick
            },
            "#chickensButton": {
                click: this.onChickensButtonClick
            },
            "#dessertsButton": {
                click: this.onDessertsButtonClick
            },
            "#ProductGrid": {
                itemdblclick: this.onProductGridItemDblClick
            },
            "#trayBtn": {
                click: this.onTrayBtnClick
            },
            "#BurgerQueen": {
                render: this.onBurgerQueenRender
            },
            "#UserProfile": {
                show: this.onUserProfileShow
            },
            "#allCategoriesButton": {
                click: this.onAllCategoriesButtonClick
            },
            "#sidesButton": {
                click: this.onSidesButtonClick
            },
            "#logoutButton": {
                click: this.onLogoutButtonClick
            },
            "#trayButton": {
                click: this.onTrayButtonClick
            },
            "#registerButton": {
                click: this.onRegisterButtonClick
            },
            "#myProfileButton": {
                click: this.onMyProfileButtonClick
            },
            "#btnProducts": {
                click: this.onBtnProductsClick
            },
            "#btnTransactions": {
                click: this.onBtnTransactionsClick
            },
            "#btnComments": {
                click: this.onBtnCommentsClick
            },
            "#btnAccept": {
                click: this.onBtnAcceptClick
            },
            "#profileOpenChangePasswordWindow": {
                click: this.onProfileOpenChangePasswordWindowClick
            }
        });
    }

});
